Postfix Evaluation Steps
Expression: 23^4*
Means: 2 3 ^ 4 *
Infix: (2^3) * 4

Algorithm

for each character ch from left to right:
    if operand → push
    if operator:
        b = pop()
        a = pop()
        result = a op b
        push(result)

import java.util.*;
public class Main
{
    public static int PostfixEvalution(String s){
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(Character.isDigit(ch))
            stack.push(ch-'0');
            else if("+-*/^".indexOf(ch)!=-1){
                int pop1=stack.pop();
                int pop2=stack.pop();
                switch(ch){
                    case '+': stack.push(pop1+pop2);
                    break;
                    case '*': stack.push(pop1*pop2);
                    break;
                    case '-': stack.push(pop2-pop1);
                    break;
                    case '/': stack.push(pop2/pop1);
                    break;
                    case '^': stack.push((int)Math.pow(pop2,pop1));
                    break;
                }
                
            }
        }
        return stack.peek();
        
    }
	public static void main(String[] args) {
	    String input="23-4+56*-";
	   System.out.println(PostfixEvalution(input));
	}
}
--------------------------------------POSTFIX MULTIDIGITS------------------------------------

import java.util.Stack;

public class Main{

    public static int apply(int a, int b, String op) {
        switch (op) {
            case "+": return a + b;
            case "-": return a - b;
            case "*": return a * b;
            case "/": return a / b;
            case "^": return (int) Math.pow(a, b);
           }
        return 0;
    }

        public static int evaluate(String expression) {
        Stack<Integer> stack = new Stack<>();
        String[] tokens = expression.split("\\s+"); // split by space

        for (String token : tokens) {
            if (token.matches("\\d+")) 
                    stack.push(Integer.parseInt(token));
            
            else if (token.matches("[+\\-*/^]")) {
                int b = stack.pop();
                int a = stack.pop();
                stack.push(apply(a, b, token));
            } 
        }

        return stack.pop();
    }

    public static void main(String[] args) {
        String postfix = "12 3 + 2 3 ^ *";
        System.out.println("Result = " + evaluate(postfix)); 
    }
}


**********************************************************************************

Prefix Evaluation Steps
Expression: *^234
Means: * (^ 2 3) 4
Infix: (2^3) * 4

Algorithm

for each character ch from right to left:
    if operand → push
    if operator:
        a = pop()
        b = pop()
        result = a op b
        push(result)

import java.util.*;
public class Main
{
    public static int PrefixEvalution(String s){
        Stack<Integer> stack=new Stack<>();
        for(int i=s.length()-1;i>=0;i--){
            char ch=s.charAt(i);
            if(Character.isDigit(ch))
            stack.push(ch-'0');
            else if("+-*/^".indexOf(ch)!=-1){
                int pop1=stack.pop();
                int pop2=stack.pop();
                switch(ch){
                    case '+': stack.push(pop1+pop2);
                    break;
                    case '*': stack.push(pop1*pop2);
                    break;
                    case '-': stack.push(pop1-pop2);
                    break;
                    case '/': stack.push(pop1/pop2);
                    break;
                    case '^': stack.push((int)Math.pow(pop1,pop2));
                    break;
                }
                
            }
        }
        return stack.peek();
        
    }
	public static void main(String[] args) {
	    String input="*^234";
	   System.out.println(PrefixEvalution(input));
	}
}


**********************************************************************************

Infix Evaluation Steps
Expression: 2^3*4

Algorithm

1. Create two stacks:
   - values ← for numbers
   - ops ← for operators

2. For each character 'ch' in the expression:
   a. If ch is a digit (0-9):
      - Convert ch to integer and push to values stack

   b. If ch is '(':
      - Push to ops stack

   c. If ch is ')':
      - While top of ops ≠ '(', do:
          - pop op from ops
          - pop two values a and b
          - compute a op b and push result to values
      - pop '(' from ops

   d. If ch is an operator (+, -, *, /, ^):
      - While ops is not empty AND precedence of ch ≤ top of ops:
          - pop op from ops
          - pop two values a and b
          - compute a op b and push result to values
      - push ch to ops

3. After all characters:
   - While ops is not empty:
       - pop op from ops
       - pop two values a and b
       - compute a op b and push result to values

4. Final answer = top of values stack

import java.util.*;
public class Main
{
    public static int OpPrece(char op){
        switch(op){
            case '^':
                return 3;
            case '*':
            case '/':
                return 2;
            case '+':
            case'-':
                return 1;
        }
        return 0;
    }
    public static int res(int a,int b,char c){
        switch(c){
            case '^':
                return ((int)Math.pow(b,a));
            case '*':
                return a*b;
            case '/':
                return b/a;
            case '+':
                return a+b;
            case'-':
                return b-a;
        }
        return 0;
        
    }
    public static int InfixEval(String s){
        Stack<Character> opstack=new Stack<>();
        Stack<Integer> valstack=new Stack<>();
       
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(Character.isDigit(ch))
            valstack.push(ch-'0');
           
            else if(ch=='(')
                opstack.push(ch);
                
            else if(ch==')'){
                while(!opstack.isEmpty()&&opstack.peek()!='(')
                {
                    int pop1=valstack.pop();
                    int pop2=valstack.pop();
                    char ch1=opstack.pop();
                    valstack.push(res(pop1,pop2,ch1));
                }
                opstack.pop();//remove '('
            }
            
            else{
                while(!opstack.isEmpty()&&OpPrece(ch)<=OpPrece(opstack.peek())){
                    int pop1=valstack.pop();
                    int pop2=valstack.pop();
                    char ch1=opstack.pop();
                    valstack.push(res(pop1,pop2,ch1));
                }
                opstack.push(ch);
            }
            
        }
        while(!opstack.isEmpty()){
              int pop1=valstack.pop();
                    int pop2=valstack.pop();
                    char ch1=opstack.pop();
                    valstack.push(res(pop1,pop2,ch1));  
            }
       return valstack.peek();
        
    }
	public static void main(String[] args) {
	    String input="(2+3)*5";
	   System.out.println(InfixEval(input));
	}
}
*******************************************************************************
Infix to postfix
A+(B*C+D)/E

 A+(BC+D)/E+FG

import java.util.*;
public class Main
{
    public static int OpPrece(char op){
        switch(op){
            case '^':
                return 3;
            case '*':
            case '/':
                return 2;
            case '+':
            case'-':
                return 1;
        }
        return 0;
    }
    public static String InfixtoPostFix(String s){
        Stack<Character> stack=new Stack<>();
        StringBuilder post=new StringBuilder();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(Character.isLetter(ch))
            post.append(ch);
           
            else if(ch=='(')
                stack.push(ch);
                
            else if(ch==')'){
                while(!stack.isEmpty()&&stack.peek()!='(')
                {
                    post.append(stack.pop());
                }
                stack.pop();//remove '('
            }
            
            else{
                while(!stack.isEmpty()&&OpPrece(ch)<=OpPrece(stack.peek())){
                    post.append(stack.pop());
                }
                stack.push(ch);
            }
            
        }
        while(!stack.isEmpty()){
                post.append(stack.pop());
            }
       return post.toString();
        
    }
	public static void main(String[] args) {
	    String input="(A+B)*C";
	   System.out.println(InfixtoPostFix(input));
	}
}
**********************************************************************************
Regex = Regular Expression
It is a pattern used to match text — like numbers, letters, symbols, etc.


| Pattern     | Meaning                              | Example Match     |
| ----------- | ------------------------------------ | ----------------  |
| `\\d`       | A digit (0–9)                        | `"5"` ✅          |
| `\\d+`      | One or more digits                   | `"123"` ✅        |
| `\\s`       | Any whitespace (space, tab, newline) | `" "` ✅          |
| `\\s+`      | One or more spaces                   | `"   "` ✅        |
| `[+\\-*/^]` | One of the characters `+ - * / ^`    | `"*"` ✅          |
| `[a-z]`     | Any lowercase letter                 | `"b"` ✅          |
| `[A-Z]`     | Any uppercase letter                 | `"M"` ✅          |
| `[a-zA-Z]`  | Any letter (lower or upper)          | `"A"` or `"z"` ✅ |

Check if token is number:

String token = "123";
if (token.matches("\\d+")) {
    System.out.println("It's a number!");
}


Check if token is an operator

String token = "+";
if (token.matches("[+\\-*/^]")) {
    System.out.println("It's an operator!");
}


