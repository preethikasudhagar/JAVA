Function PrimMST(Graph G, int V):

    Initialize:
        seen[V] = false for all vertices
        minCost = 0
        MST = empty list to store edges
        pq = empty priority queue (min-heap based on edge weight)

    Start from vertex 0:
        seen[0] = true
        Add all edges from vertex 0 to pq

    While pq is not empty:
        currEdge = pq.remove()  // Get edge with minimum weight

        If currEdge.to is already seen:
            continue

        Mark currEdge.to as seen
        Add currEdge to MST
        Add currEdge.wt to minCost

        For each neighborEdge from currEdge.to:
            If neighborEdge.to is not seen:
                Add neighborEdge to pq

    Print MST and minCost

****************
PRIMS IMPLEMENTATION

import java.util.*;
class Edge{
    int to,wt;
    Edge(int t,int w){
        to=t;
        wt=w;
    }
}

public class Main
{
    static int V=4;
    static List<List<Edge>> graph=new ArrayList<>();
    
	public static void add(int i,int j,int wt){
	   graph.get(i).add(new Edge(j,wt));
       graph.get(j).add(new Edge(i,wt));
	}
	public static void display()
	{
	    for(int i=0;i<V;i++){
	        System.out.print(i+": ");
	    for(Edge v:graph.get(i))
	    System.out.print(v.to+" "+v.wt+"   ");
	        System.out.println();
	        
	    }
	}
    public static void prims(int start){
        boolean seen[]=new boolean[V];
        int min=0;
        PriorityQueue<Edge> pq=new PriorityQueue<>((a,b)->a.wt-b.wt);
        
        seen[start]=true;
        pq.addAll(graph.get(start));
       // System.out.print(pq);
        while(!pq.isEmpty())
      {
          Edge rem=pq.remove();
           
          if(seen[rem.to]==true) continue;
           
          seen[rem.to]=true;
          min+=rem.wt;
           
          for(Edge e:graph.get(rem.to)){
              if(!seen[e.to])
              pq.add(e);
          }
      }
      System.out.print("Min cost: "+min);
    }
	public static void main(String[] args) {
	    
	    for(int i=0;i<V;i++){
	        graph.add(new ArrayList<>());
	    }
	    
	    add(0,1,1);
	    add(0,2,2);
	    add(1,2,3);
	    add(1,3,2);
	    add(2,3,5);
	    display();
	    prims(0);
	}
}










*********************

KRUSKAL(G):
  MST = empty set
  sort all edges of G in increasing order by weight
  makeSet(V)    // initialize Disjoint Set for all vertices

  for each edge (u, v) in sorted edge list:
      if find(u) ≠ find(v):       // no cycle
          add edge (u, v) to MST
          union(u, v)             // connect components

  return MST



************


Input: Graph G(V, E) with edges and weights

Step 1: Sort all edges in increasing order of weight

Step 2: Initialize Disjoint Set
    for each vertex v in V:
        MAKE-SET(v)

Step 3: Initialize MST as empty
    MST ← ∅
    totalCost ← 0

Step 4: For each edge (u, v, weight) in sorted edges:
    if FIND(u) ≠ FIND(v):      // u and v are in different sets
        ADD (u, v) to MST       // safe to add (no cycle)
        totalCost ← totalCost + weight
        UNION(u, v)

Output: MST edges and totalCost



MAKE-SET(x):
    parent[x] ← x
    rank[x] ← 0

FIND(x):
    if parent[x] ≠ x:
        parent[x] ← FIND(parent[x])     // Path compression
    return parent[x]

UNION(x, y):
    rootX ← FIND(x)
    rootY ← FIND(y)

    if rootX = rootY:
        return  // already connected

    if rank[rootX] < rank[rootY]:
        parent[rootX] ← rootY
    else if rank[rootX] > rank[rootY]:
        parent[rootY] ← rootX
    else:
        parent[rootY] ← rootX
        rank[rootX] ← rank[rootX] + 1



+**************************************Implementation


import java.util.*;
class Edge{
    int from,to,wt;
    Edge(int f,int t,int w){
        from=f;
        to=t;
        wt=w;
    }
}


public class Main
{
    static int V=4;
    static int parent[]=new int[4];
    static int rank[]=new int[4];
    static int min=0;
    static PriorityQueue<Edge> graph=new PriorityQueue<>((a,b)->a.wt-b.wt);
    
    public static void display(){
        while(!graph.isEmpty()){
            Edge e=graph.poll();
        System.out.print(e.from+" "+e.to+" "+e.wt+"\n");
        }
    }
    public static int find(int p){//path compression
        if(p!=parent[p])
        parent[p]=find(parent[p]);
        return parent[p];
    }
    public static boolean union(int p1,int p2){
        
        int n1=find(p1);
        int n2=find(p2);
        if(n1==n2) return true;
        
        if(rank[n1]<rank[n2])
            parent[n1]=n2;
        else if(rank[n1]>rank[n2])
            parent[n2]=n1;
        else{
            parent[n2]=n1;
            rank[n1]++;
        }
        return false;
    }
    
    public static void kruskal(){
        while(!graph.isEmpty()){
            Edge e=graph.poll();
        
            if(!union(e.from,e.to)){
                min+=e.wt;
            }
        }
        System.out.print("Min cost: "+min);
    }
    public static void main(String[] args) {
        for(int i=0;i<V;i++){
        parent[i]=i;
        rank[i]=1;
        }
        graph.add(new Edge(1,2,3));
	    graph.add(new Edge(1,3,2));
	    graph.add(new Edge(0,1,1));
	    graph.add(new Edge(0,2,3));
	    graph.add(new Edge(2,3,5));
	   //boolean v= union(0,1);
	   // System.out.println(Arrays.toString(parent));
	   // System.out.print(Arrays.toString(rank));
	  //  display();
	   kruskal();
	   
	}
}

