***********************Recursion****************

Recursion is a programming technique where a function calls itself in order to solve a problem. It is particularly useful for problems that can be broken down into smaller, similar subproblems. A recursive function typically has two parts:

Base Case: The condition under which the recursion stops.

Recursive Case: The part where the function calls itself with a modified argument.

Types of Recursion:

1.Direct Recursion: A function calls itself directly.

Example:

public class Recursion {
    public static int factorial(int n) {
        if (n == 0) { // Base case
            return 1;
        } else {      // Recursive case
            return n * factorial(n - 1);
        }
    }

    public static void main(String[] args) {
        System.out.println(factorial(5)); 
    }
}
Flow diagram:

factorial(3)
    -> 3 * factorial(2)
        -> 2 * factorial(1)
            -> 1 * factorial(0)
                -> 1 (base case)
            <- 1
        <- 2
    <- 6

2.Indirect Recursion: A function calls another function, which eventually calls the first function.
public class IndirectRecursion {

    public static void funA(int n) {
        if (n <= 0) return;
        System.out.println("A: " + n);
        funB(n - 1);
    }

    public static void funB(int n) {
        if (n <= 0) return;
        System.out.println("B: " + n);
        funA(n - 1);
    }

    public static void main(String[] args) {
        funA(5);
    }
}

3.Tail Recursion: The recursive call is the last operation in the function.
Tail recursion can be optimized by compilers to avoid stack overflow.
class Main { 
static void fun(int n) 
{ 
	if (n > 0) 
	{ 
	System.out.print(n + " "); 
	fun(n - 1); 
	} 
} 
public static void main(String[] args) 
{ 
	int x = 3; 
	fun(x); 
} 
} 

4.Non-Tail Recursion: The recursive call is not the last operation.
Additional operations are performed after the recursive call.

import java.io.*; 

class Main{ 
static void fun(int n) 
{ 
	if (n > 0) { 
		fun(n - 1); 
		System.out.print(" "+ n); 
	} 
} 

public static void main(String[] args) 
{ 
	int x = 3; 
	fun(x); 
	
} 
} 
5.TREE Recursion
A recursive function makes more than one recursive call in its body, leading to a tree-like structure of calls.
class Main
{ 
static void fun(int n) 
{ 
	if (n > 0) { 
		System.out.print(" "+ n); 
		fun(n - 1); 
		fun(n - 1); 
	} 
} 
public static void main(String[] args) 
{ 
	fun(3); 
	} 
} 
6.Nested Recursion
A recursive function calls itself with a recursive call as one of its arguments.

import java.util.*; 

class Main { 
static int fun(int n) 
{ 
	if (n > 100) 
		return n - 10; 
	return fun(fun(n + 11)); 
} 

public static void main(String args[]) 
{ 
	int r; 
	r = fun(95); 
	System.out.print(" "+ r); 
	
} 
} 

***************************Problems to solve*********************8
1.Problem: Calculate the sum of the first n natural numbers.

import java.util.*;
public class Main
{
    public static int sum(int num)
    {
        if(num==1)
        return 1;
    
        return num+sum(num-1);
    }
    
	public static void main(String[] args) {
		
		Scanner ob=new Scanner(System.in);
		int n=ob.nextInt();
		
		System.out.println(sum(n));
		
		}
}


2. Calculate x power n  using recursion.

**************************************************************
What is the Taylor Series?

The Taylor series represents a function as an infinite sum of its derivatives

f(x) = f(0) + f'(0)/1! * x + f''(0)/2! * x^2 + f'''(0)/3! * x^3 + ... + f‚Åø(0)/n! * x^n



e^x = 1 + x/1! + x^2/2! + x^3/3! + ......

sin(x) = x - x^3/3! + x^5/5! - x^7/7! + ... + (-1)^n x^{2n+1}/(2n+1)!

cos(x) = 1 - x^2/2! + x^4/4! - x^6/6! + ... + (-1)^n x^{2n}/(2n)!


Calculate e^x  using the Taylor series:
e^x = 1 + x/1! + x^2/2! + x^3/3! + ......






TaylorOptimized*******************************
public class Main {

    public static double taylor(int x, int n) {
        return taylorHelper(x, n, 1);
    }

    public static double taylorHelper(int x, int n, double result) {
        if (n == 0)
            return result;
        result = 1 + (x * result) / n;
        return taylorHelper(x, n - 1, result);
    }

    public static void main(String[] args) {
        int x = 2, n = 10;
        System.out.printf("Optimized e^%d ‚âà %.6f\n", x, taylor(x, n));
    }
}
Fibonacci
public static int fib(int n) {
    if (n <= 1)
        return n;
    return fib(n - 1) + fib(n - 2);
}
Exponential time O(2^n)

Fibonacci optmised---Memoization (Top-Down DP)
public static int fib(int n, int[] dp) {
    if (n <= 1)
        return n;
    if (dp[n] != -1)
        return dp[n];
    dp[n] = fib(n - 1, dp) + fib(n - 2, dp);
    return dp[n];
}
Time: O(n)
Space: O(n)

Fibonacci optmised--- Bottom-Up (Tabulation)

public static int fib(int n) {
    if (n <= 1) return n;
    int[] dp = new int[n + 1];
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}

Time: O(n)
Space: O(n)
***************************************************************************


| Feature        | **Memoization (Top-Down)**                          | **Tabulation (Bottom-Up)**                            |
| -------------- | --------------------------------------------------- | ----------------------------------------------------- |
| Approach       | Top-down (uses recursion)                           | Bottom-up (uses iteration)                            |
| Storage        | Stores results in an array/map when needed          | Fills a table (array) from bottom up                  |
| Calls          | Recursive calls happen first, and answers are saved | No recursion; uses loops                              |
| Base Case      | Starts from goal (e.g., `fibo(n)`) and breaks down  | Starts from base case (e.g., `fibo(0)`) and builds up |
| Execution      | Slower due to recursive call stack                  | Usually faster, no overhead of recursion              |
| Stack Overflow | Possible for large `n` due to deep recursion        | Not possible (iterative)                              |


********************************************************************************
Solving Recurrence Relations 

A mathematical equation that expresses a term as a function of its preceding
terms.

Used to describe recursive algorithms and computational problems.

General Form: T(n)=f(T(n‚àí1),T(n‚àí2),...,T(n‚àík))+g(n)T(n) = f(T(n-1), T(n-2), ...,
T(n-k)) + g(n)T(n)=f(T(n‚àí1),T(n‚àí2),...,T(n‚àík))+g(n)

Types:
1Ô∏è‚É£ First-Order Recurrence
A first-order recurrence relation is a way of defining a sequence where each term depends only on its immediate previous term.

üß† General Form:
T(n) = a * T(n - 1) + f(n)
Where:

a is a constant multiplier,

f(n) is an extra function or value added (can be 0),

A base case like T(1) or T(0) is always required.
 
Example Sum of natural num,Factorial

Scenario Question

You are developing a mobile app that tracks battery usage over time. The phone starts with a 100% battery, and every minute it drains by a fixed rate (in percentage).

Write a recursive Java program to calculate the remaining battery percentage after n minutes.
USE public static int simulateBattery(int n, int drainRate)

Input:
n ‚Üí Number of minutes the device has been running.
drainRate ‚Üí Battery percentage drained per minute.

Output:
Remaining battery percentage after n minutes.

Input:
n = 5
drainRate = 3

Output:
Battery after 5 mins: 85%
Explanation:
100 - (5 √ó 3) = 85%

*************************************************************************************
2Ô∏è‚É£ Second-Order Recurrence

A second-order recurrence relation is a sequence where each term depends on the previous two terms.
General Form:
T(n) = a * T(n - 1) + b * T(n - 2) + f(n)
a, b: Constants

f(n): Some function of n (optional)

Requires two base cases: e.g., T(0) and T(1)

Example fibonacci

Scenario Question

A frog is sitting at the bottom of a staircase with n steps.
The frog can jump either 1 step or 2 steps at a time.
Your task is to find the total number of distinct ways the frog can reach the top.

Write a recursive function to calculate the number of ways the frog can reach the nth step.

Input:
An integer n representing the number of steps.

Output:
An integer representing the number of distinct ways to reach the nth step.

Input:
n = 3

Output:
Ways to reach step 3: 3
‚û°Ô∏è Three ways:

[1 + 1 + 1]

[1 + 2]

[2 + 1]


*************************************************************************************
3Ô∏è‚É£ Third-Order Recurrence
A third-order recurrence relation defines each term based on the three previous terms.

General Form:

T(n) = a * T(n - 1) + b * T(n - 2) + c * T(n - 3) + f(n)
a, b, c: constants

f(n): optional additional function

Requires 3 base cases: e.g. T(1), T(2), T(3)

Example Tribonacci

*************************************************************************************
Applications 

Algorithm Analysis ‚Äì Sorting (Merge Sort, Quick Sort)
‚úÖ Mathematical Sequences ‚Äì Fibonacci, Factorial, Tower of Hanoi
‚úÖ Computational Problems ‚Äì Dynamic Programming, Tree Structures
‚úÖ Physics & Engineering ‚Äì Wave Propagation, Circuit Analysis

*************************************************************************************


What is an Indirect Recurrence Relation?
In an indirect recurrence, one function is defined in terms of another function, and vice versa.

It's like function A calls B, and function B calls A ‚Äî they depend on each other to compute their values.

Let‚Äôs define two functions:

E(n) ‚Üí number of ways to do something when n is even

O(n) ‚Üí number of ways when n is odd

And they are defined like this:

E(n) = E(n - 2) + O(n - 1)     // even depends on odd
O(n) = E(n - 1) + O(n - 2)     // odd depends on even
