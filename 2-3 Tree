B-Tree is a self-balancing search tree used for storing large amounts of sorted data and allows search, insertion, and deletion in logarithmic time.

It’s mainly used in:

Databases

File systems

Operating systems

Indexing structures (e.g., in MySQL)

| Property                         | Description                                       |
| -------------------------------- | ------------------------------------------------- |
| 🔢 **Maximum keys per node**     | `m - 1` keys                                      |
| 🌿 **Maximum children per node** | `m` children                                      |
| 🪜 **Sorted keys**               | Keys inside a node are sorted                     |
| 📏 **Balanced tree**             | All leaf nodes are at the same level              |
| 🧠 **Multi-way tree**            | Not just binary, supports multiple branches       |
| ♻️ **Efficient operations**      | Search, Insert, Delete – all in **O(log n)** time |


Structure Example (B-Tree of Order 3)
Each node can have max 2 keys and max 3 children.

          [20]
         /    \
     [10]    [30, 40]


Root has 1 key → 2 children

Right child has 2 keys → 3 children (if it had them)



A  2-3 Tree is a B-tree of order 3.
That means each node can contain:

1 data element (2-node)
→ has 2 children (or none, if it's a leaf)

2 data elements (3-node)
→ has 3 children (or none, if it's a leaf)

The tree remains perfectly balanced, meaning all leaves are at the same level.

| Property             | Description                                             |
| -------------------- | ------------------------------------------------------- |
| Node types           | 2-node (1 key), 3-node (2 keys)                         |
| Children per node    | 2-node → 2 children; 3-node → 3 children                |
| Sorted order         | All elements are stored in a sorted manner              |
| Balanced             | Every leaf is at the same depth                         |
| Insertion / Deletion | Automatically balances the tree using splitting/merging |
| Height               | `O(log n)`                                              |



Databases and file systems (e.g., B-trees)

Memory-efficient searching

Compilers, indexing systems

55 30 15 75 65 45 5.

50 60  70 40 30 20 10 80 90 100

ALGORITHM
DATABASE
TECHNOLOGY

****†*************

what is 2_3_4 Trees?!

A 2-3-4 Tree is an extension of a 2-3 Tree. Each node can have:

1 key → 2-node

2 keys → 3-node

3 keys → 4-node (4-node is unique to 2-3-4 trees)


3 7 4 9 10 0 5 6 8 2 1

********************************************

 Red-Black Tree is a self-balancing binary search tree.

It is a practical version of a 2-3-4 Tree, used in:

Java: TreeMap, TreeSet

C++: map, set (STL)

Databases, file systems

Red-Black Tree Rules
To be a valid red-black tree, it must follow these 5 rules:

| Rule No. | Rule Description                                                            |
| -------- | --------------------------------------------------------------------------- |
| 1️⃣      | Every node is either **red or black**                                       |
| 2️⃣      | The root is always **black**                                                |
| 3️⃣      | All leaves (nulls) are **black**                                            |
| 4️⃣      | If a node is **red**, its **children must be black** (no two reds in a row) |
| 5️⃣      | Every path from root to leaf has the **same number of black nodes**         |

Tree Insertion Algorithm

If tree is empty - insert newnode as black
If tree is not empty - insert newnode as red.
If parent of newnode is black, insert newnode and exit (i.e., carry on with next in the)
If parent of newnode is red, then check the parent's sibling.

1,Sibiling Of parent is black or NULL
(i) rotate (AVL rotation)
(ii) recolour
parent
grandparent.

2,Sibling of parent is red
(i) recolour
parent
parent's sibling
(ii) check if grandparent of newnode is root node or not.
If not, then recolour grandparent and recheck.


1 2 3 4 5 6 7 8 9 10

10 18 7 15 16 30 25 40 60  2 1 70

***************************************
A heap tree is a binary tree that satisfies:

✅ Complete Binary Tree property

✅ Heap Order Property (either min-heap or max-heap)

Min heap
        1
      /   \
     3     5
    / \   /
   7   9  6

Max heap

        9
      /   \
     7     6
    / \   /
   3   1  5

Heap
A  heap refers to:

A specialized tree-based data structure

Usually implemented as an array

Follows either min-heap or max-heap rules

✅ Efficient for:

Inserting elements

Deleting min/max

Priority Queue operations

Tree view:
        1
      /   \
     3     5
    / \   /
   7   9  6

Array: [1, 3, 5, 7, 9, 6]

Left child: 2*i + 1

Right child: 2*i + 2

Parent: (i - 1) / 2

Applications of Heap

CPU Scheduling (Priority Queue)

Dijkstra’s Algorithm (Min Heap)

Huffman Coding

Heap Sort

******************************
Heap Insertion

import java.util.*;
public class Main
{
    static int arr[]=new int[50];
    static int size=0;
    
    public static void add(int v){
        arr[size]=v;//arr[0]=50//arr[1]=30
        int i=size;//i=0//i=1
        size++;//size1//2
        
        while(i>0){//true
        int p=(i-1)/2;//p=0//0
        if(arr[p]>arr[i])//arr[p]=50>arr[i]=30
        {
            int temp=arr[p];//temp=50
            arr[p]=arr[i];//arr[p]=30
            arr[i]=temp;//arr[i]=50
            i=p;
        }
        else
        break;
    }
    }

import java.util.*;
public class Main
{
    static int arr[]=new int[50];
    static int size=0;
    
    public static void add(int v){
        arr[size]=v;//arr[0]=50//arr[1]=30
        int i=size;//i=0//i=1
        size++;//size1//2
        
        while(i>0){//true
        int p=(i-1)/2;//p=0//0
        if(arr[p]>arr[i])//arr[p]=50>arr[i]=30
        {
            int temp=arr[p];//temp=50
            arr[p]=arr[i];//arr[p]=30
            arr[i]=temp;//arr[i]=50
            i=p;
        }
        else
        break;
    }
    }
    public static void delete(){
        arr[0]=arr[size-1];
        size--;
        int i=0;
        while((2*i+1)<size)
        {
        int min=i;
        int l=2*min+1;
        int r=2*min+2;
        
        if(arr[l]<arr[min])
        min=l;
        if(arr[r]<arr[min])
        min=r;
        if(min!=i){
            int temp=arr[min];
            arr[min]=arr[i];
            arr[i]=temp;
            i=min;
        }
        else break;
        }
    }
	public static void main(String[] args) {
	    
		
	add(50);
	add(30);
	add(20);
	add(15);
	add(10);
	add(8);
	add(16);
		
		
		for(int i=0;i<size;i++)
		System.out.print(arr[i]+" ");
		System.out.println();
		delete();
		for(int i=0;i<size;i++)
		System.out.print(arr[i]+" ");
		System.out.println();
		delete();
		for(int i=0;i<size;i++)
		System.out.print(arr[i]+" ");
		
		
	}
}public static void main(String[] args) {
	    
		
	add(50);
	add(30);
	add(20);
	add(15);
	add(10);
	add(8);
	add(16);
		
		
		for(int i=0;i<size;i++)
		System.out.print(arr[i]+" ");
		
	}
}
